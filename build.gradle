plugins {
  id 'java'
  id 'application'
  id 'checkstyle'
  id("com.diffplug.spotless") version "7.0.2"
  id 'org.openjfx.javafxplugin' version '0.1.0'
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'at.fh.burgenland'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.2'
  javaFxVersion = '17.0.6'
}

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

application {
  mainClass = 'at.fh.burgenland.HelloApplication'
}

javafx {
  version = '17.0.6'
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
  testImplementation 'org.hamcrest:hamcrest:3.0'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
  testImplementation "org.testfx:testfx-junit5:4.0.18"
  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
  testRuntimeOnly 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
}

checkstyle {
  // This is required to refer to the Google Style XML provided in the Checkstyle jar.
  def archive = configurations.checkstyle.resolve().find { it.name.startsWith("checkstyle") }
  config = resources.text.fromArchiveEntry(archive, "google_checks.xml")

  toolVersion = '10.21.0'
  maxWarnings = 0
  maxErrors = 0
}

test {
  useJUnitPlatform()
}

spotless {
  java {
    googleJavaFormat('1.17.0') // Use the formatter version you prefer
  }
}

shadowJar {
  archiveBaseName.set('your-app')
  archiveClassifier.set('')
  archiveVersion.set(project.version.toString())
  manifest {
    attributes(
            'Main-Class': application.mainClass
    )
  }
}